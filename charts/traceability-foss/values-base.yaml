#
# Copyright (c) 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

#########################
# Global Values configuration     #
#########################
global:
  enablePrometheus: false
  enableGrafana: false

#########################
# Frontend Chart Values configuration     #
#########################
frontend:
  nameOverride: 'CHANGE_ME'
  fullnameOverride: 'CHANGE_ME'
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  image:
    repository: ghcr.io/catenax-ng/tx-traceability-foss
    tag: $ARGOCD_APP_REVISION
    CATENAX_PORTAL_API_URL: 'CHANGE_ME'
    CATENAX_PORTAL_KEYCLOAK_URL: 'CHANGE_ME'
    CATENAX_PORTAL_BACKEND_DOMAIN: 'CHANGE_ME'
    CATENAX_PORTAL_URL: 'CHANGE_ME'
    CATENAX_PORTAL_CLIENT_ID: 'CHANGE_ME'

  ingress:
    enabled: true
    className: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: 'CHANGE_ME'
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - hosts:
          - 'CHANGE_ME'
        secretName: 'CHANGE_ME'

#########################
# Backend Chart Values configuration     #
#########################
backend:
  nameOverride: 'CHANGE_ME'
  fullnameOverride: 'CHANGE_ME'
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  image:
    repository: ghcr.io/catenax-ng/tx-traceability-foss
    tag: $ARGOCD_APP_REVISION




  podSecurityContext:
    runAsUser: 10001
    seccompProfile:
      type: RuntimeDefault

  # Following Catena-X Helm Best Practices @url: https://catenax-ng.github.io/docs/kubernetes-basics/helm
  # @url: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  securityContext:
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: 10001
    runAsGroup: 3000
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false

  # Following Catena-X Helm Best Practices @url: https://catenax-ng.github.io/docs/kubernetes-basics/helm
  # @url: https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-resource-requests-and-limits
  resources:
    limits:
      cpu: 1500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi

  springprofile: dev

  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: HTTP
    hosts:
      - host: 'CHANGE_ME'
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - hosts:
          - 'CHANGE_ME'
        secretName: tls-secret

  traceability:
    bpn: 'CHANGE_ME'
    url: 'CHANGE_ME'
    leftOperand: 'PURPOSE'
    operatorType: 'eq'
    rightOperand: 'ID 3.0 Trace'
    validUntil: '2024-09-30T23:59:59.99Z'

  datasource:
    url: 'CHANGE_ME'
    username: trace
    password: 'CHANGE_ME'

  oauth2:
    clientId: 'CHANGE_ME'
    clientSecret: 'CHANGE_ME'
    clientTokenUri: 'CHANGE_ME'
    jwkSetUri: 'CHANGE_ME'
    resourceClient: 'CHANGE_ME'
    clientScope: 'openid'

  edc:
    apiKey: 'CHANGE_ME'
    providerUrl: 'CHANGE_ME'
    callbackUrl: 'CHANGE_ME'
    callbackUrlEdcClient: 'CHANGE_ME'
    dataEndpointUrl: 'CHANGE_ME'

  discoveryfinder:
    baseUrl: 'CHANGE_ME'

  submodel:
    baseUrl: 'CHANGE_ME'
  irs:
    baseUrl: 'CHANGE_ME'
  registry:
    urlWithPath: 'CHANGE_ME'
    allowedBpns: 'CHANGE_ME'
  portal:
    baseUrl: 'CHANGE_ME'

  config:
    allowedCorsOriginFirst: "http://localhost:4200/"
    allowedCorsOriginSecond: 'CHANGE_ME'

  irsAdminApiKey: &irs_admin_api_key <path:traceability-foss/data/dev/irs#API_KEY_ADMIN>
  irsRegularApiKey: &irs_regular_api_key <path:traceability-foss/data/dev/irs#API_KEY_REGULAR>

  dependencies:
    enabled: true
    irs: 'CHANGE_ME'  # <item-relationship-service.nameOverride>
    edc: 'CHANGE_ME'  # <tractusx-connector.nameOverride

  bpdm:
    url: 'https://partners-pool.int.demo.catena-x.net'


#########################
# PG Admin configuration     #
#########################
pgadmin4:
  nameOverride: 'CHANGE_ME'
  fullnameOverride: 'CHANGE_ME'
  enabled: true
  strategy:
    type: Recreate
  networkPolicy:
    enabled: false
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/backend-protocol: HTTP
    hosts:
      - host: 'CHANGE_ME'
        paths:
          - path: /
            pathType: Prefix
    tls:
      - hosts:
          - 'CHANGE_ME'
        secretName: tls-secret
  env:
    email: pgadmin4@trace.foss
    password: 'CHANGE_ME'
    variables:
      - name: PGADMIN_CONFIG_UPGRADE_CHECK_ENABLED
        value: "False"
  resources:
    limits:
      cpu: 768m
      memory: 768Mi
    requests:
      cpu: 100m
      memory: 256Mi

#########################
# Postgres configuration     #
#########################
postgresql:
  enabled: true

  nameOverride: 'CHANGE_ME'
  fullnameOverride: 'CHANGE_ME'

  auth:
    postgresPassword: 'CHANGE_ME'
    password: 'CHANGE_ME'
    database: "trace"
    username: "trace"  # extract to vault

#########################
# IRS configuration     #
#########################
item-relationship-service:
  bpn: 'CHANGE_ME'
  enabled: true

  resources:
    limits:
      cpu: 1000m
      memory: 512Mi
    requests:
      cpu: 500m
      memory: 512Mi

  nameOverride: 'CHANGE_ME'
  fullnameOverride: 'CHANGE_ME'
  namespace: product-traceability-foss
  springprofile: dev
  irsUrl: 'CHANGE_ME'
  ingress:
    enabled: true
    hosts:
      - host: 'CHANGE_ME'
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - hosts:
          - 'CHANGE_ME'
        secretName: tls-secret
  digitalTwinRegistry:
    type: decentral
    descriptorEndpoint: 'CHANGE_ME'
    shellLookupEndpoint: 'CHANGE_ME'
    discoveryFinderUrl: 'CHANGE_ME'
  semanticshub:
    localModels:
      #1.0.1#SerialPart
      dXJuOmJhbW06aW8uY2F0ZW5heC5zZXJpYWxfcGFydDoxLjAuMSNTZXJpYWxQYXJ0: 
      #2.0.0#Batch
      dXJuOnNhbW06aW8uY2F0ZW5heC5iYXRjaDoyLjAuMCNCYXRjaA: ewogICIkc2NoZW1hIiA6ICJodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA0L3NjaGVtYSMiLAogICJkZXNjcmlwdGlvbiIgOiAiQSBiYXRjaCBpcyBhIHF1YW50aXR5IG9mIChzZW1pLSkgZmluaXNoZWQgcHJvZHVjdHMgb3IgKHJhdykgbWF0ZXJpYWwgcHJvZHVjdCB0aGF0IGhhdmUgYmVlbiBwcm9kdWNlZCB1bmRlciB0aGUgc2FtZSBjaXJjdW1zdGFuY2VzIChlLmcuIHNhbWUgcHJvZHVjdGlvbiBsb2NhdGlvbiksIGFzIHNwZWNpZmllZCBncm91cHMgb3IgYW1vdW50cywgd2l0aGluIGEgY2VydGFpbiB0aW1lIGZyYW1lLiBFdmVyeSBiYXRjaCBjYW4gZGlmZmVyIGluIHRoZSBudW1iZXIgb3IgYW1vdW50IG9mIHByb2R1Y3RzLiBEaWZmZXJlbnQgYmF0Y2hlcyBjYW4gaGF2ZSB2YXJpZWQgc3BlY2lmaWNhdGlvbnMsIGUuZy4sIGRpZmZlcmVudCBjb2xvcnMuIEEgYmF0Y2ggaXMgaWRlbnRpZmllZCB2aWEgYSBCYXRjaCBJRC4iLAogICJ0eXBlIiA6ICJvYmplY3QiLAogICJjb21wb25lbnRzIiA6IHsKICAgICJzY2hlbWFzIiA6IHsKICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguYmF0Y2hfMi4wLjBfQ2F0ZW5hWElkVHJhaXQiIDogewogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHByb3ZpZGVkIHJlZ3VsYXIgZXhwcmVzc2lvbiBlbnN1cmVzIHRoYXQgdGhlIFVVSUQgaXMgY29tcG9zZWQgb2YgZml2ZSBncm91cHMgb2YgY2hhcmFjdGVycyBzZXBhcmF0ZWQgYnkgaHlwaGVucywgaW4gdGhlIGZvcm0gOC00LTQtNC0xMiBmb3IgYSB0b3RhbCBvZiAzNiBjaGFyYWN0ZXJzICgzMiBoZXhhZGVjaW1hbCBjaGFyYWN0ZXJzIGFuZCA0IGh5cGhlbnMpLCBvcHRpb25hbGx5IHByZWZpeGVkIGJ5IFwidXJuOnV1aWQ6XCIgdG8gbWFrZSBpdCBhbiBJUkkuIiwKICAgICAgICAicGF0dGVybiIgOiAiKF5bMC05YS1mQS1GXXs4fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXsxMn0kKXwoXnVybjp1dWlkOlswLTlhLWZBLUZdezh9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezEyfSQpIgogICAgICB9LAogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5iYXRjaF8yLjAuMF9LZXlUcmFpdCIgOiB7CiAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJDb25zdHJhaW50IHRoYXQgZW5zdXJlcyB0aGF0IHRoZSBwcmVkZWZpbmVkIGtleXMgYXJlIHVzZWQuIiwKICAgICAgICAicGF0dGVybiIgOiAiXihtYW51ZmFjdHVyZXJJZHxiYXRjaElkKSQiCiAgICAgIH0sCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LmJhdGNoXzIuMC4wX1ZhbHVlQ2hhcmFjdGVyaXN0aWMiIDogewogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHZhbHVlIG9mIGFuIGlkZW50aWZpZXIuIgogICAgICB9LAogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5iYXRjaF8yLjAuMF9LZXlWYWx1ZUxpc3QiIDogewogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQSBsaXN0IG9mIGtleSB2YWx1ZSBwYWlycyBmb3IgbG9jYWwgaWRlbnRpZmllcnMsIHdoaWNoIGFyZSBjb21wb3NlZCBvZiBhIGtleSBhbmQgYSBjb3JyZXNwb25kaW5nIHZhbHVlLiIsCiAgICAgICAgInR5cGUiIDogIm9iamVjdCIsCiAgICAgICAgInByb3BlcnRpZXMiIDogewogICAgICAgICAgImtleSIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGtleSBvZiBhIGxvY2FsIGlkZW50aWZpZXIuIiwKICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguYmF0Y2hfMi4wLjBfS2V5VHJhaXQiCiAgICAgICAgICB9LAogICAgICAgICAgInZhbHVlIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgdmFsdWUgb2YgYW4gaWRlbnRpZmllci4iLAogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5iYXRjaF8yLjAuMF9WYWx1ZUNoYXJhY3RlcmlzdGljIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgInJlcXVpcmVkIiA6IFsgImtleSIsICJ2YWx1ZSIgXQogICAgICB9LAogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5iYXRjaF8yLjAuMF9Mb2NhbElkZW50aWZpZXJDaGFyYWN0ZXJpc3RpYyIgOiB7CiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJBIGJhdGNoIG1heSBoYXZlIG11bHRpcGxlIGF0dHJpYnV0ZXMsIHdoaWNoIHVuaXF1ZWx5IGlkZW50aWZ5IHRoYXQgYmF0Y2ggaW4gYSBzcGVjaWZpYyBkYXRhc3BhY2UgKGUuZy4gdGhlIG1hbnVmYWN0dXJlcmBzIGRhdGFzcGFjZSkiLAogICAgICAgICJ0eXBlIiA6ICJhcnJheSIsCiAgICAgICAgIml0ZW1zIiA6IHsKICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LmJhdGNoXzIuMC4wX0tleVZhbHVlTGlzdCIKICAgICAgICB9LAogICAgICAgICJ1bmlxdWVJdGVtcyIgOiB0cnVlCiAgICAgIH0sCiAgICAgICJ1cm5fc2FtbV9vcmcuZWNsaXBzZS5lc21mLnNhbW1fY2hhcmFjdGVyaXN0aWNfMi4xLjBfVGltZXN0YW1wIiA6IHsKICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAicGF0dGVybiIgOiAiLT8oWzEtOV1bMC05XXszLH18MFswLTldezN9KS0oMFsxLTldfDFbMC0yXSktKDBbMS05XXxbMTJdWzAtOV18M1swMV0pVCgoWzAxXVswLTldfDJbMC0zXSk6WzAtNV1bMC05XTpbMC01XVswLTldKFxcLlswLTldKyk/fCgyNDowMDowMChcXC4wKyk/KSkoWnwoXFwrfC0pKCgwWzAtOV18MVswLTNdKTpbMC01XVswLTldfDE0OjAwKSk/IiwKICAgICAgICAiZGVzY3JpcHRpb24iIDogIkRlc2NyaWJlcyBhIFByb3BlcnR5IHdoaWNoIGNvbnRhaW5zIHRoZSBkYXRlIGFuZCB0aW1lIHdpdGggYW4gb3B0aW9uYWwgdGltZXpvbmUuIgogICAgICB9LAogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5iYXRjaF8yLjAuMF9Qcm9kdWN0aW9uQ291bnRyeUNvZGVUcmFpdCIgOiB7CiAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJSZWd1bGFyIEV4cHJlc3Npb24gdGhhdCBlbnN1cmVzIGEgdGhyZWUtbGV0dGVyIGNvZGUiLAogICAgICAgICJwYXR0ZXJuIiA6ICJeW0EtWl17M30kIgogICAgICB9LAogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5iYXRjaF8yLjAuMF9NYW51ZmFjdHVyaW5nQ2hhcmFjdGVyaXN0aWMiIDogewogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQ2hhcmFjdGVyaXN0aWMgdG8gZGVzY3JpYmUgbWFudWZhY3R1cmluZyByZWxhdGVkIGRhdGEiLAogICAgICAgICJ0eXBlIiA6ICJvYmplY3QiLAogICAgICAgICJwcm9wZXJ0aWVzIiA6IHsKICAgICAgICAgICJkYXRlIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaW1lc3RhbXAgb2YgdGhlIG1hbnVmYWN0dXJpbmcgZGF0ZSBhcyB0aGUgZmluYWwgc3RlcCBpbiBwcm9kdWN0aW9uIHByb2Nlc3MgKGUuZy4gZmluYWwgcXVhbGl0eSBjaGVjaywgcmVhZHktZm9yLXNoaXBtZW50IGV2ZW50KSIsCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9vcmcuZWNsaXBzZS5lc21mLnNhbW1fY2hhcmFjdGVyaXN0aWNfMi4xLjBfVGltZXN0YW1wIgogICAgICAgICAgfSwKICAgICAgICAgICJjb3VudHJ5IiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJDb3VudHJ5IGNvZGUgd2hlcmUgdGhlIHBhcnQgd2FzIG1hbnVmYWN0dXJlZCIsCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LmJhdGNoXzIuMC4wX1Byb2R1Y3Rpb25Db3VudHJ5Q29kZVRyYWl0IgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgInJlcXVpcmVkIiA6IFsgImRhdGUiIF0KICAgICAgfSwKICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguYmF0Y2hfMi4wLjBfUGFydElkQ2hhcmFjdGVyaXN0aWMiIDogewogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHBhcnQgSUQgaXMgYSBtdWx0aS1jaGFyYWN0ZXIgc3RyaW5nLCB1c3VzYWxseSBhc3NpZ25lZCBieSBhbiBFUlAgc3lzdGVtIgogICAgICB9LAogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5iYXRjaF8yLjAuMF9QYXJ0TmFtZUNoYXJhY3RlcmlzdGljIiA6IHsKICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAiZGVzY3JpcHRpb24iIDogIlBhcnQgTmFtZSBpbiBzdHJpbmcgZm9ybWF0IGZyb20gdGhlIHJlc3BlY3RpdmUgc3lzdGVtIGluIHRoZSB2YWx1ZSBjaGFpbiIKICAgICAgfSwKICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguYmF0Y2hfMi4wLjBfQ2xhc3NpZmljYXRpb25DaGFyYWN0ZXJpc3RpYyIgOiB7CiAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJBIHBhcnQgdHlwZSBtdXN0IGJlIHBsYWNlZCBpbnRvIG9uZSBvZiB0aGUgZm9sbG93aW5nIGNsYXNzZXM6ICdjb21wb25lbnQnLCAncHJvZHVjdCcsICdzb2Z0d2FyZScsICdhc3NlbWJseScsICd0b29sJywgb3IgJ3JhdyBtYXRlcmlhbCcuIiwKICAgICAgICAiZW51bSIgOiBbICJwcm9kdWN0IiwgInJhdyBtYXRlcmlhbCIsICJzb2Z0d2FyZSIsICJhc3NlbWJseSIsICJ0b29sIiwgImNvbXBvbmVudCIgXQogICAgICB9LAogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5iYXRjaF8yLjAuMF9QYXJ0VHlwZUluZm9ybWF0aW9uQ2hhcmFjdGVyaXN0aWMiIDogewogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGNoYXJhY3RlcmlzdGljcyBvZiB0aGUgcGFydCB0eXBlIiwKICAgICAgICAidHlwZSIgOiAib2JqZWN0IiwKICAgICAgICAicHJvcGVydGllcyIgOiB7CiAgICAgICAgICAibWFudWZhY3R1cmVyUGFydElkIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJQYXJ0IElEIGFzIGFzc2lnbmVkIGJ5IHRoZSBtYW51ZmFjdHVyZXIgb2YgdGhlIHBhcnQuIFRoZSBQYXJ0IElEIGlkZW50aWZpZXMgdGhlIHBhcnQgKGFzIGRlc2lnbmVkKSBpbiB0aGUgbWFudWZhY3R1cmVyYHMgZGF0YXNwYWNlLiBUaGUgUGFydCBJRCBkb2VzIG5vdCByZWZlcmVuY2UgYSBzcGVjaWZpYyBpbnN0YW5jZSBvZiBhIHBhcnQgYW5kIHRodXMgc2hvdWxkIG5vdCBiZSBjb25mdXNlZCB3aXRoIHRoZSBzZXJpYWwgbnVtYmVyIG9yIGJhdGNoIG51bWJlci4iLAogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5iYXRjaF8yLjAuMF9QYXJ0SWRDaGFyYWN0ZXJpc3RpYyIKICAgICAgICAgIH0sCiAgICAgICAgICAibmFtZUF0TWFudWZhY3R1cmVyIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJOYW1lIG9mIHRoZSBwYXJ0IGFzIGFzc2lnbmVkIGJ5IHRoZSBtYW51ZmFjdHVyZXIiLAogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5iYXRjaF8yLjAuMF9QYXJ0TmFtZUNoYXJhY3RlcmlzdGljIgogICAgICAgICAgfSwKICAgICAgICAgICJjbGFzc2lmaWNhdGlvbiIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGNsYXNzaWZpY2F0aW9uIG9mIHRoZSBwYXJ0IHR5cGUgYWNjb3JkaW5nIHRvIFNURVAgc3RhbmRhcmQgZGVmaW5pdGlvbiIsCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LmJhdGNoXzIuMC4wX0NsYXNzaWZpY2F0aW9uQ2hhcmFjdGVyaXN0aWMiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAicmVxdWlyZWQiIDogWyAibWFudWZhY3R1cmVyUGFydElkIiwgIm5hbWVBdE1hbnVmYWN0dXJlciIsICJjbGFzc2lmaWNhdGlvbiIgXQogICAgICB9CiAgICB9CiAgfSwKICAicHJvcGVydGllcyIgOiB7CiAgICAiY2F0ZW5hWElkIiA6IHsKICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgZnVsbHkgYW5vbnltb3VzIENhdGVuYS1YIElEIG9mIHRoZSBiYXRjaCwgdmFsaWQgZm9yIHRoZSBDYXRlbmEtWCBkYXRhc3BhY2UuIiwKICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguYmF0Y2hfMi4wLjBfQ2F0ZW5hWElkVHJhaXQiCiAgICB9LAogICAgImxvY2FsSWRlbnRpZmllcnMiIDogewogICAgICAiZGVzY3JpcHRpb24iIDogIkEgbG9jYWwgaWRlbnRpZmllciBlbmFibGVzIGlkZW50aWZpY2F0aW9uIG9mIGEgcGFydCBpbiBhIHNwZWNpZmljIGRhdGFzcGFjZSwgYnV0IGlzIG5vdCB1bmlxdWUgaW4gQ2F0ZW5hLVggZGF0YXNwYWNlLiBNdWx0aXBsZSBsb2NhbCBpZGVudGlmaWVycyBtYXkgZXhpc3QuIiwKICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguYmF0Y2hfMi4wLjBfTG9jYWxJZGVudGlmaWVyQ2hhcmFjdGVyaXN0aWMiCiAgICB9LAogICAgIm1hbnVmYWN0dXJpbmdJbmZvcm1hdGlvbiIgOiB7CiAgICAgICJkZXNjcmlwdGlvbiIgOiAiSW5mb3JtYXRpb24gZnJvbSBtYW51ZmFjdHVyaW5nIHByb2Nlc3MsIHN1Y2ggYXMgbWFudWZhY3R1cmluZyBkYXRlIGFuZCBtYW51ZmFjdHVyaW5nIGNvdW50cnkiLAogICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5iYXRjaF8yLjAuMF9NYW51ZmFjdHVyaW5nQ2hhcmFjdGVyaXN0aWMiCiAgICB9LAogICAgInBhcnRUeXBlSW5mb3JtYXRpb24iIDogewogICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBwYXJ0IHR5cGUgb2Ygd2hpY2ggdGhlIGJhdGNoIGhhcyBiZWVuIGluc3RhbnRpYXRlZCBvZi4iLAogICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5iYXRjaF8yLjAuMF9QYXJ0VHlwZUluZm9ybWF0aW9uQ2hhcmFjdGVyaXN0aWMiCiAgICB9CiAgfSwKICAicmVxdWlyZWQiIDogWyAiY2F0ZW5hWElkIiwgImxvY2FsSWRlbnRpZmllcnMiLCAibWFudWZhY3R1cmluZ0luZm9ybWF0aW9uIiwgInBhcnRUeXBlSW5mb3JtYXRpb24iIF0KfQo=
      # urn:bamm:io.catenax.single_level_bom_as_built:1.0.0#SingleLevelBomAsBuilt
      dXJuOmJhbW06aW8uY2F0ZW5heC5zaW5nbGVfbGV2ZWxfYm9tX2FzX2J1aWx0OjIuMC4wI1NpbmdsZUxldmVsQm9tQXNCdWlsdA: 
      # urn:bamm:io.catenax.single_level_usage_as_built:2.0.0#SingleLevelUsageAsBuilt
      dXJuOmJhbW06aW8uY2F0ZW5heC5zaW5nbGVfbGV2ZWxfdXNhZ2VfYXNfYnVpbHQ6Mi4wLjAjU2luZ2xlTGV2ZWxVc2FnZUFzQnVpbHQ: 
      # urn:bamm:io.catenax.single_level_bom_as_planned:2.0.0#SingleLevelBomAsPlanned
      dXJuOmJhbW06aW8uY2F0ZW5heC5zaW5nbGVfbGV2ZWxfYm9tX2FzX3BsYW5uZWQ6Mi4wLjAjU2luZ2xlTGV2ZWxCb21Bc1BsYW5uZWQ: 
      #urn:bamm:io.catenax.part_site_information_as_planned:1.0.0#PartSiteInformationAsPlanned
      dXJuOmJhbW06aW8uY2F0ZW5heC5wYXJ0X3NpdGVfaW5mb3JtYXRpb25fYXNfcGxhbm5lZDoxLjAuMCNQYXJ0U2l0ZUluZm9ybWF0aW9uQXNQbGFubmVk: ewogICIkc2NoZW1hIiA6ICJodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA0L3NjaGVtYSIsCiAgImRlc2NyaXB0aW9uIiA6ICJUaGUgYXNwZWN0IHByb3ZpZGVzIHNpdGUgcmVsYXRlZCBpbmZvcm1hdGlvbiBmb3IgYSBnaXZlbiBhcyBwbGFubmVkIGl0ZW0gKGkuZS4gYSBwYXJ0IHR5cGUgb3IgcGFydCBpbnN0YW5jZSB0aGF0IGlzIHVuaXF1ZWx5IGlkZW50aWZpYWJsZSB3aXRoaW4gQ2F0ZW5hLVggdmlhIGl0cyBDYXRlbmEtWCBJRCkuIEEgc2l0ZSBpcyBhIGRlbGltaXRlZCBnZW9ncmFwaGljYWwgYXJlYSB3aGVyZSBhIGxlZ2FsIGVudGl0eSBkb2VzIGJ1c2luZXNzLiBJbiB0aGUgXCJhcyBwbGFubmVkXCIgbGlmZWN5Y2xlIGNvbnRleHQgYWxsIHBvdGVudGlhbGx5IHJlbGF0ZWQgc2l0ZXMgYXJlIGxpc3RlZCBpbmNsdWRpbmcgYWxsIHNpdGVzIHdoZXJlIGUuZy4gcHJvZHVjdGlvbiBvZiB0aGlzIHBhcnQgKHR5cGUpIGlzIHBsYW5uZWQuIiwKICAidHlwZSIgOiAib2JqZWN0IiwKICAiY29tcG9uZW50cyIgOiB7CiAgICAic2NoZW1hcyIgOiB7CiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnBhcnRfc2l0ZV9pbmZvcm1hdGlvbl9hc19wbGFubmVkXzEuMC4wX0NhdGVuYVhJZFRyYWl0IiA6IHsKICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBwcm92aWRlZCByZWd1bGFyIGV4cHJlc3Npb24gZW5zdXJlcyB0aGF0IHRoZSBVVUlEIGlzIGNvbXBvc2VkIG9mIGZpdmUgZ3JvdXBzIG9mIGNoYXJhY3RlcnMgc2VwYXJhdGVkIGJ5IGh5cGhlbnMsIGluIHRoZSBmb3JtIDgtNC00LTQtMTIgZm9yIGEgdG90YWwgb2YgMzYgY2hhcmFjdGVycyAoMzIgaGV4YWRlY2ltYWwgY2hhcmFjdGVycyBhbmQgNCBoeXBoZW5zKSwgb3B0aW9uYWxseSBwcmVmaXhlZCBieSBcInVybjp1dWlkOlwiIHRvIG1ha2UgaXQgYW4gSVJJLiIsCiAgICAgICAgInBhdHRlcm4iIDogIiheWzAtOWEtZkEtRl17OH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17MTJ9JCl8KF51cm46dXVpZDpbMC05YS1mQS1GXXs4fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXsxMn0kKSIKICAgICAgfSwKICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXgucGFydF9zaXRlX2luZm9ybWF0aW9uX2FzX3BsYW5uZWRfMS4wLjBfQnBuQ2hhcmFjdGVyaXN0aWMiIDogewogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQSBzdHJpbmcgb2YgMTYgY2hhcmFjdGVyczpcblByZWZpeDogMyBkaWdpdHNcdFx0XHRcdFxuQ2xhc3NpZmljYXRpb246IDEgZGlnaXRcbklkZW50aWZpZXI6IDEwIGRpZ2l0cyIKICAgICAgfSwKICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXgucGFydF9zaXRlX2luZm9ybWF0aW9uX2FzX3BsYW5uZWRfMS4wLjBfRnVuY3Rpb25DaGFyYWN0ZXJpc3RpYyIgOiB7CiAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgImVudW0iIDogWyAicHJvZHVjdGlvbiIgXQogICAgICB9LAogICAgICAidXJuX3NhbW1fb3JnLmVjbGlwc2UuZXNtZi5zYW1tX2NoYXJhY3RlcmlzdGljXzIuMS4wX1RpbWVzdGFtcCIgOiB7CiAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgInBhdHRlcm4iIDogIi0/KFsxLTldWzAtOV17Myx9fDBbMC05XXszfSktKDBbMS05XXwxWzAtMl0pLSgwWzEtOV18WzEyXVswLTldfDNbMDFdKVQoKFswMV1bMC05XXwyWzAtM10pOlswLTVdWzAtOV06WzAtNV1bMC05XShcXC5bMC05XSspP3woMjQ6MDA6MDAoXFwuMCspPykpKFp8KFxcK3wtKSgoMFswLTldfDFbMC0zXSk6WzAtNV1bMC05XXwxNDowMCkpPyIsCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJEZXNjcmliZXMgYSBQcm9wZXJ0eSB3aGljaCBjb250YWlucyB0aGUgZGF0ZSBhbmQgdGltZSB3aXRoIGFuIG9wdGlvbmFsIHRpbWV6b25lLiIKICAgICAgfSwKICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXgucGFydF9zaXRlX2luZm9ybWF0aW9uX2FzX3BsYW5uZWRfMS4wLjBfU2l0ZUVudGl0eSIgOiB7CiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTaXRlIEVudGl0eSIsCiAgICAgICAgInR5cGUiIDogIm9iamVjdCIsCiAgICAgICAgInByb3BlcnRpZXMiIDogewogICAgICAgICAgImNhdGVuYVhTaXRlSWQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBpZGVudGlmaWVyIG9mIHRoZSBzaXRlIGFjY29yZGluZyB0byBDYXRlbmEtWCBCUERNLiBUaGUgY2F0ZW5hWFNpdGVJZCBtdXN0IGJlIGEgdmFsaWQgQ2F0ZW5hLVggQlBOLiBUaGUgQlBOIGlzIGEgdW5pcXVlLCB1bmNoYW5nZWFibGUgaWRlbnRpZmllciBmb3IgQnVzaW5lc3MgUGFydG5lcnMgLyBjb21wYW55IGxvY2F0aW9ucyBmcm9tIGZvdW5kYXRpb24gdG8gY2xvc3VyZSwgcmVnYXJkbGVzcyBvZiB0aGUgZGlmZmVyZW50IGJ1c2luZXNzIHJlbGF0aW9uc2hpcHMgLyBzdHJ1Y3R1cmVzIGJldHdlZW4gb3Igd2l0aGluIHRoZSBCdXNpbmVzcyBQYXJ0bmVycyBvciBjb21wYW55IGxvY2F0aW9ucy4iLAogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5wYXJ0X3NpdGVfaW5mb3JtYXRpb25fYXNfcGxhbm5lZF8xLjAuMF9CcG5DaGFyYWN0ZXJpc3RpYyIKICAgICAgICAgIH0sCiAgICAgICAgICAiZnVuY3Rpb24iIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBmdW5jdGlvbiBvZiB0aGUgc2l0ZSBpbiByZWxhdGlvbiB0byB0aGUgcGFydCAoaS5lLiB0aGUgYWN0aXZpdHkgd2l0aGluIHRoZSB2YWx1ZSBjaGFpbiBvZiB0aGUgcGFydCB0aGF0IGlzIHBlcmZvcm1lZCBhdCB0aGUgc2l0ZSkiLAogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5wYXJ0X3NpdGVfaW5mb3JtYXRpb25fYXNfcGxhbm5lZF8xLjAuMF9GdW5jdGlvbkNoYXJhY3RlcmlzdGljIgogICAgICAgICAgfSwKICAgICAgICAgICJmdW5jdGlvblZhbGlkRnJvbSIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGltZXN0YW1wLCBmcm9tIHdoZW4gdGhlIHNpdGUgaGFzIHRoZSBzcGVjaWZpZWQgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBwYXJ0IiwKICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX29yZy5lY2xpcHNlLmVzbWYuc2FtbV9jaGFyYWN0ZXJpc3RpY18yLjEuMF9UaW1lc3RhbXAiCiAgICAgICAgICB9LAogICAgICAgICAgImZ1bmN0aW9uVmFsaWRVbnRpbCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGltZXN0YW1wLCB1bnRpbCB3aGVuIHRoZSBzaXRlIGhhcyB0aGUgc3BlY2lmaWVkIGZ1bmN0aW9uIGZvciB0aGUgZ2l2ZW4gcGFydCIsCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9vcmcuZWNsaXBzZS5lc21mLnNhbW1fY2hhcmFjdGVyaXN0aWNfMi4xLjBfVGltZXN0YW1wIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgInJlcXVpcmVkIiA6IFsgImNhdGVuYVhTaXRlSWQiLCAiZnVuY3Rpb24iIF0KICAgICAgfSwKICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXgucGFydF9zaXRlX2luZm9ybWF0aW9uX2FzX3BsYW5uZWRfMS4wLjBfU2l0ZXNDaGFyYWN0ZXJpc3RpYyIgOiB7CiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTaXRlcyBDaGFyYWN0ZXJpc3RpYyIsCiAgICAgICAgInR5cGUiIDogImFycmF5IiwKICAgICAgICAiaXRlbXMiIDogewogICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXgucGFydF9zaXRlX2luZm9ybWF0aW9uX2FzX3BsYW5uZWRfMS4wLjBfU2l0ZUVudGl0eSIKICAgICAgICB9LAogICAgICAgICJ1bmlxdWVJdGVtcyIgOiB0cnVlCiAgICAgIH0KICAgIH0KICB9LAogICJwcm9wZXJ0aWVzIiA6IHsKICAgICJjYXRlbmFYSWQiIDogewogICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBDYXRlbmEtWCBJRCBvZiB0aGUgZ2l2ZW4gaXRlbSAoaS5lLiBhIHBhcnQgdHlwZSBvciBwYXJ0IGluc3RhbmNlKSwgdmFsaWQgZm9yIHRoZSBDYXRlbmEtWCBkYXRhc3BhY2UuIiwKICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXgucGFydF9zaXRlX2luZm9ybWF0aW9uX2FzX3BsYW5uZWRfMS4wLjBfQ2F0ZW5hWElkVHJhaXQiCiAgICB9LAogICAgInNpdGVzIiA6IHsKICAgICAgImRlc2NyaXB0aW9uIiA6ICJBIHNpdGUgaXMgYSBkZWxpbWl0ZWQgZ2VvZ3JhcGhpY2FsIGFyZWEgd2hlcmUgYSBsZWdhbCBlbnRpdHkgZG9lcyBidXNpbmVzcyAoZ2VvZ3JhcGhpY2FsIGFkZHJlc3Mgd2l0aCBnZW8gY29vcmRpbmF0ZXMpLkEgc2l0ZSBhbHdheXMgaGFzIGEgcHJpbWFyeSBwaHlzaWNhbCBhZGRyZXNzLiBJdCBpcyBwb3NzaWJsZSB0aGF0IGZ1cnRoZXIgcGh5c2ljYWwgYWRkcmVzc2VzIGFyZSBzcGVjaWZpZWQgZm9yIHRoZSBzaXRlLiBQLk8uIGJveCBkZXRhaWxzIGFyZSBvbmx5IHBvc3NpYmxlIGluIGFkZGl0aW9uIHRvIHRoZSBwaHlzaWNhbCBhZGRyZXNzLiBBIHNpdGUgaGFzIGEgMTpuIHJlbGF0aW9uIHRvIGFkZHJlc3NlcywgbWVhbnMgYXQgbGVhc3QgMSBhZGRyZXNzIGlzIG5lY2Vzc2FyeSBhbmQgbXVsdGlwbGUgYWRkcmVzc2VzIGFyZSBwb3NzaWJsZS4iLAogICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5wYXJ0X3NpdGVfaW5mb3JtYXRpb25fYXNfcGxhbm5lZF8xLjAuMF9TaXRlc0NoYXJhY3RlcmlzdGljIgogICAgfQogIH0sCiAgInJlcXVpcmVkIiA6IFsgImNhdGVuYVhJZCIsICJzaXRlcyIgXQp9Cg==
      #urn:bamm:io.catenax.part_as_planned:1.0.1#PartAsPlanned
      dXJuOmJhbW06aW8uY2F0ZW5heC5wYXJ0X2FzX3BsYW5uZWQ6MS4wLjEjUGFydEFzUGxhbm5lZA: ewogICIkc2NoZW1hIiA6ICJodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA0L3NjaGVtYSIsCiAgImRlc2NyaXB0aW9uIiA6ICJBIFBhcnQgYXMgUGxhbm5lZCByZXByZXNlbnRzIGFuIGl0ZW0gaW4gdGhlIENhdGVuYS1YIEJpbGwgb2YgTWF0ZXJpYWwgKEJPTSkgaW4gQXMtUGxhbm5lZCBsaWZlY3ljbGUgc3RhdHVzIGluIGEgc3BlY2lmaWMgdmVyc2lvbi4gIiwKICAidHlwZSIgOiAib2JqZWN0IiwKICAiY29tcG9uZW50cyIgOiB7CiAgICAic2NoZW1hcyIgOiB7CiAgICAgICJ1cm5fYmFtbV9pby5jYXRlbmF4LnBhcnRfYXNfcGxhbm5lZF8xLjAuMV9DYXRlbmFYSWRUcmFpdCIgOiB7CiAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgcHJvdmlkZWQgcmVndWxhciBleHByZXNzaW9uIGVuc3VyZXMgdGhhdCB0aGUgVVVJRCBpcyBjb21wb3NlZCBvZiBmaXZlIGdyb3VwcyBvZiBjaGFyYWN0ZXJzIHNlcGFyYXRlZCBieSBoeXBoZW5zLCBpbiB0aGUgZm9ybSA4LTQtNC00LTEyIGZvciBhIHRvdGFsIG9mIDM2IGNoYXJhY3RlcnMgKDMyIGhleGFkZWNpbWFsIGNoYXJhY3RlcnMgYW5kIDQgaHlwaGVucykuIiwKICAgICAgICAicGF0dGVybiIgOiAiKF5bMC05YS1mQS1GXXs4fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXsxMn0kKXwoXnVybjp1dWlkOlswLTlhLWZBLUZdezh9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezEyfSQpIgogICAgICB9LAogICAgICAidXJuX2JhbW1faW8uY2F0ZW5heC5wYXJ0X2FzX3BsYW5uZWRfMS4wLjFfUGFydElkQ2hhcmFjdGVyaXN0aWMiIDogewogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHBhcnQgSUQgaXMgYSBtdWx0aS1jaGFyYWN0ZXIgc3RyaW5nLCB1c3VzYWxseSBhc3NpZ25lZCBieSBhbiBFUlAgc3lzdGVtIgogICAgICB9LAogICAgICAidXJuX2JhbW1faW8uY2F0ZW5heC5wYXJ0X2FzX3BsYW5uZWRfMS4wLjFfUGFydE5hbWVDaGFyYWN0ZXJpc3RpYyIgOiB7CiAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJQYXJ0IE5hbWUgaW4gc3RyaW5nIGZvcm1hdCBmcm9tIHRoZSByZXNwZWN0aXZlIHN5c3RlbSBpbiB0aGUgdmFsdWUgY2hhaW4iCiAgICAgIH0sCiAgICAgICJ1cm5fYmFtbV9pby5jYXRlbmF4LnBhcnRfYXNfcGxhbm5lZF8xLjAuMV9DbGFzc2lmaWNhdGlvbkVudW1lcmF0aW9uQ2hhcmFjdGVyaXN0aWMiIDogewogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQSBwYXJ0IHR5cGUgbXVzdCBiZSBwbGFjZWQgaW50byBvbmUgb2YgdGhlIGZvbGxvd2luZyBjbGFzc2VzOiAnY29tcG9uZW50JywgJ3Byb2R1Y3QnLCAnc29mdHdhcmUnLCDigJhhc3NlbWJseeKAmSwgJ3Rvb2wnLCBvciAncmF3IG1hdGVyaWFsJy4iLAogICAgICAgICJlbnVtIiA6IFsgInByb2R1Y3QiLCAicmF3IG1hdGVyaWFsIiwgInNvZnR3YXJlIiwgImFzc2VtYmx5IiwgInRvb2wiLCAiY29tcG9uZW50IiBdCiAgICAgIH0sCiAgICAgICJ1cm5fYmFtbV9pby5jYXRlbmF4LnBhcnRfYXNfcGxhbm5lZF8xLjAuMV9QYXJ0VHlwZUluZm9ybWF0aW9uQ2hhcmFjdGVyaXN0aWMiIDogewogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGNoYXJhY3RlcmlzdGljcyBvZiB0aGUgcGFydCB0eXBlIiwKICAgICAgICAidHlwZSIgOiAib2JqZWN0IiwKICAgICAgICAicHJvcGVydGllcyIgOiB7CiAgICAgICAgICAibWFudWZhY3R1cmVyUGFydElkIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJQYXJ0IElEIGFzIGFzc2lnbmVkIGJ5IHRoZSBtYW51ZmFjdHVyZXIgb2YgdGhlIHBhcnQuIFRoZSBQYXJ0IElEIGlkZW50aWZpZXMgdGhlIHBhcnQgaW4gdGhlIG1hbnVmYWN0dXJlcmBzIGRhdGFzcGFjZS4gVGhlIFBhcnQgSUQgcmVmZXJlbmNlcyBhIHNwZWNpZmljIHZlcnNpb24gb2YgYSBwYXJ0LiBUaGUgdmVyc2lvbiBudW1iZXIgbXVzdCBiZSBpbmNsdWRlZCBpbiB0aGUgUGFydCBJRCBpZiBpdCBpcyBhdmFpbGFibGUuXG5cblRoZSBQYXJ0IElEIGRvZXMgbm90IHJlZmVyZW5jZSBhIHNwZWNpZmljIGluc3RhbmNlIG9mIGEgcGFydCBhbmQgbXVzdCBub3QgYmUgY29uZnVzZWQgd2l0aCB0aGUgc2VyaWFsIG51bWJlci4iLAogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX2JhbW1faW8uY2F0ZW5heC5wYXJ0X2FzX3BsYW5uZWRfMS4wLjFfUGFydElkQ2hhcmFjdGVyaXN0aWMiCiAgICAgICAgICB9LAogICAgICAgICAgIm5hbWVBdE1hbnVmYWN0dXJlciIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiTmFtZSBvZiB0aGUgcGFydCBhcyBhc3NpZ25lZCBieSB0aGUgbWFudWZhY3R1cmVyIiwKICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLmNhdGVuYXgucGFydF9hc19wbGFubmVkXzEuMC4xX1BhcnROYW1lQ2hhcmFjdGVyaXN0aWMiCiAgICAgICAgICB9LAogICAgICAgICAgImNsYXNzaWZpY2F0aW9uIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgY2xhc3NpZmljYXRpb24gb2YgdGhlIHBhcnQgdHlwZSBhY2NvcmRpbmcgdG8gU1RFUCBzdGFuZGFyZCBkZWZpbml0aW9uIiwKICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLmNhdGVuYXgucGFydF9hc19wbGFubmVkXzEuMC4xX0NsYXNzaWZpY2F0aW9uRW51bWVyYXRpb25DaGFyYWN0ZXJpc3RpYyIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJyZXF1aXJlZCIgOiBbICJtYW51ZmFjdHVyZXJQYXJ0SWQiLCAibmFtZUF0TWFudWZhY3R1cmVyIiwgImNsYXNzaWZpY2F0aW9uIiBdCiAgICAgIH0sCiAgICAgICJ1cm5fYmFtbV9pby5vcGVubWFudWZhY3R1cmluZ19jaGFyYWN0ZXJpc3RpY18yLjAuMF9UaW1lc3RhbXAiIDogewogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICJwYXR0ZXJuIiA6ICItPyhbMS05XVswLTldezMsfXwwWzAtOV17M30pLSgwWzEtOV18MVswLTJdKS0oMFsxLTldfFsxMl1bMC05XXwzWzAxXSlUKChbMDFdWzAtOV18MlswLTNdKTpbMC01XVswLTldOlswLTVdWzAtOV0oXFwuWzAtOV0rKT98KDI0OjAwOjAwKFxcLjArKT8pKShafChcXCt8LSkoKDBbMC05XXwxWzAtM10pOlswLTVdWzAtOV18MTQ6MDApKT8iLAogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiRGVzY3JpYmVzIGEgUHJvcGVydHkgd2hpY2ggY29udGFpbnMgdGhlIGRhdGUgYW5kIHRpbWUgd2l0aCBhbiBvcHRpb25hbCB0aW1lem9uZS4iCiAgICAgIH0sCiAgICAgICJ1cm5fYmFtbV9pby5jYXRlbmF4LnBhcnRfYXNfcGxhbm5lZF8xLjAuMV9WYWxpZGl0eVBlcmlvZENoYXJhY3RlcmlzdGljIiA6IHsKICAgICAgICAiZGVzY3JpcHRpb24iIDogIkNoYXJhY3RlcmlzdGljIHRvIGRlZmluZSBhIGNvbnRpbnVvdXMgdmFsaWRpdHkgcGVyaW9kLiIsCiAgICAgICAgInR5cGUiIDogIm9iamVjdCIsCiAgICAgICAgInByb3BlcnRpZXMiIDogewogICAgICAgICAgInZhbGlkRnJvbSIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiU3RhcnQgZGF0ZSBvZiB2YWxpZGl0eSBwZXJpb2QiLAogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX2JhbW1faW8ub3Blbm1hbnVmYWN0dXJpbmdfY2hhcmFjdGVyaXN0aWNfMi4wLjBfVGltZXN0YW1wIgogICAgICAgICAgfSwKICAgICAgICAgICJ2YWxpZFRvIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJFbmQgZGF0ZSBvZiB2YWxpZGl0eSBwZXJpb2QiLAogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX2JhbW1faW8ub3Blbm1hbnVmYWN0dXJpbmdfY2hhcmFjdGVyaXN0aWNfMi4wLjBfVGltZXN0YW1wIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sCiAgInByb3BlcnRpZXMiIDogewogICAgImNhdGVuYVhJZCIgOiB7CiAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGZ1bGx5IGFub255bW91cyBDYXRlbmEtWCBJRCBvZiB0aGUgc2VyaWFsaXplZCBwYXJ0LCB2YWxpZCBmb3IgdGhlIENhdGVuYS1YIGRhdGFzcGFjZS4iLAogICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX2JhbW1faW8uY2F0ZW5heC5wYXJ0X2FzX3BsYW5uZWRfMS4wLjFfQ2F0ZW5hWElkVHJhaXQiCiAgICB9LAogICAgInBhcnRUeXBlSW5mb3JtYXRpb24iIDogewogICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBwYXJ0IHR5cGUgZnJvbSB3aGljaCB0aGUgc2VyaWFsaXplZCBwYXJ0IGhhcyBiZWVuIGluc3RhbnRpYXRlZCIsCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4LnBhcnRfYXNfcGxhbm5lZF8xLjAuMV9QYXJ0VHlwZUluZm9ybWF0aW9uQ2hhcmFjdGVyaXN0aWMiCiAgICB9LAogICAgInZhbGlkaXR5UGVyaW9kIiA6IHsKICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgcGVyaW9kIG9mIHRpbWUgZHVyaW5nIHdoaWNoIHRoZSBQYXJ0IGlzIG9mZmVyZWQgYnkgdGhlIG1hbnVmYWN0dXJlciBhbmQgY2FuIGJlIHB1cmNoYXNlZCBieSBjdXN0b21lcnMuIiwKICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLmNhdGVuYXgucGFydF9hc19wbGFubmVkXzEuMC4xX1ZhbGlkaXR5UGVyaW9kQ2hhcmFjdGVyaXN0aWMiCiAgICB9CiAgfSwKICAicmVxdWlyZWQiIDogWyAiY2F0ZW5hWElkIiwgInBhcnRUeXBlSW5mb3JtYXRpb24iIF0KfQ==
      #urn:bamm:io.catenax.just_in_sequence_part:1.0.0#JustInSequencePart
      dXJuOmJhbW06aW8uY2F0ZW5heC5qdXN0X2luX3NlcXVlbmNlX3BhcnQ6MS4wLjAjSnVzdEluU2VxdWVuY2VQYXJ0: 
      #urn:bamm:io.catenax.traction_battery_code:1.0.0#TractionBatteryCode
      dXJuOmJhbW06aW8uY2F0ZW5heC50cmFjdGlvbl9iYXR0ZXJ5X2NvZGU6MS4wLjAjVHJhY3Rpb25CYXR0ZXJ5Q29kZQ: ewogICIkc2NoZW1hIiA6ICJodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA0L3NjaGVtYSIsCiAgImRlc2NyaXB0aW9uIiA6ICJUaGUgdHJhY3Rpb24gYmF0dGVyeSBjb2RlIGlzIGFuIGlkZW50aWZpY2F0aW9uIGNvZGUgZm9yIGFueSBhdXRvbW90aXZlIHRyYWN0aW9uIGJhdHRlcnksIHVsdHJhY2FwYWNpdG9yIGFuZCBvdGhlciByZWFjaGFyZ2VibGUgZW5lcmd5IHN0b3JhZ2UgZGV2aWNlLiBJdCBhbGxvd3MgdG8gY2FycnkgaW5mb3JtYXRpb24gYXMgcmVxdWlyZWQgYnkgdGhlIE5hdGlvbmFsIFN0YW5kYXJkIG9mIHRoZSBQZW9wbGUncyBSZXB1YmxpYyBvZiBDaGluYSBhY2NvcmRpbmcgdG8gR0IvVCAzNDAxNC0yMDE3IHB1Ymxpc2hlZCBieSB0aGUgU3RhbmRhcmRpemF0aW9uIEFkbWluaXN0cmF0aW9uIG9mIENoaW5hIChTQUMpLiIsCiAgInR5cGUiIDogIm9iamVjdCIsCiAgImNvbXBvbmVudHMiIDogewogICAgInNjaGVtYXMiIDogewogICAgICAidXJuX2JhbW1faW8uY2F0ZW5heC50cmFjdGlvbl9iYXR0ZXJ5X2NvZGVfMS4wLjBfVHJhY3Rpb25CYXR0ZXJ5Q29kZVRyYWl0IiA6IHsKICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSB0cmFjdGlvbiBiYXR0ZXJ5IGNvZGUgYXMgcmVxdWlyZWQgYnkgdGhlIE5hdGlvbmFsIFN0YW5kYXJkIG9mIHRoZSBQZW9wbGUncyBSZXB1YmxpYyBvZiBDaGluYSBhY2NvcmRpbmcgdG8gR0IvVCAzNDAxNC0yMDE3IHB1Ymxpc2hlZCBieSB0aGUgU3RhbmRhcmRpemF0aW9uIEFkbWluaXN0cmF0aW9uIG9mIENoaW5hIChTQUMpLiBJdCBjYW4gaGF2ZSBhIGxlbmd0aCBvZiBlaXRoZXIgMjQgb3IgMTggY2hhcmFjdGVycy4iLAogICAgICAgICJwYXR0ZXJuIiA6ICIoXltBLVowLTldezN9W1BNQ117MX1bQS1HWl17MX1bQS1aMC05XXsyfVtBLVowLTldezd9WzEtOUEtR0gtTlBSLVldezF9WzEtOUEtQ117MX1bMC05QS1HSC1OUFItWV17MX1bMC05XXs3fSQpfCheW0EtWjAtOV17M31bUE1DXXsxfVtBLUdaXXsxfVtBLVowLTldezJ9WzEtOUEtR0gtTlBSLVldezF9WzEtOUEtQ117MX1bMC05QS1HSC1OUFItWV17MX1bMC05XXs3fVtSXXsxfVtQTUNdezF9JCkiCiAgICAgIH0sCiAgICAgICJ1cm5fYmFtbV9pby5jYXRlbmF4LnRyYWN0aW9uX2JhdHRlcnlfY29kZV8xLjAuMF9Db21wb25lbnRUeXBlQ2hhcmFjdGVyc3RpYyIgOiB7CiAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgImVudW0iIDogWyAicGFjayIsICJtb2R1bGUiLCAiY2VsbCIgXQogICAgICB9LAogICAgICAidXJuX2JhbW1faW8uY2F0ZW5heC50cmFjdGlvbl9iYXR0ZXJ5X2NvZGVfMS4wLjBfVHJhY3Rpb25CYXR0ZXJ5Q29tcG9uZW50IiA6IHsKICAgICAgICAiZGVzY3JpcHRpb24iIDogIkEgYmF0dGVyeSBjb21wb25lbnQgbGlrZSBhIGNlbGwgb3IgYSBtb2R1bGUuIiwKICAgICAgICAidHlwZSIgOiAib2JqZWN0IiwKICAgICAgICAicHJvcGVydGllcyIgOiB7CiAgICAgICAgICAidHJhY3Rpb25CYXR0ZXJ5Q29kZSIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVHJhY3Rpb24gQmF0dGVyeSBDb2RlIGlkZW50aWZ5aW5nIGEgc2luZ2xlIHRyYWN0aW9uIGJhdHRlcnkgY29tcG9uZW50IGxpa2UgYSBwYWNrLCBtb2R1bGUgb3IgY2VsbC4gIiwKICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLmNhdGVuYXgudHJhY3Rpb25fYmF0dGVyeV9jb2RlXzEuMC4wX1RyYWN0aW9uQmF0dGVyeUNvZGVUcmFpdCIKICAgICAgICAgIH0sCiAgICAgICAgICAic3ViY29tcG9uZW50cyIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiU3ViY29tcG9uZW50cyBvZiB0aGUgY29tcG9uZW50LCBpZiBhcHBsaWNhYmxlLiBUaGUgcmVsYXRpb25zaGlwIGJldHdlZW4gdHJhY3Rpb24gYmF0dGVyeSBjb2RlcyBhcmUgYXMgZm9sbG93czpcblxuSWYgdGhpcyB0cmFjdGlvbiBiYXR0ZXJ5IGNvZGUgaXMgZ2l2ZW4gZm9yIGEgY2VsbCBzdWJjb21wb25lbnRzIGFyZSBub3QgcmVxdWlyZWQuIFxuSWYgdGhpcyB0cmFjdGlvbiBiYXR0ZXJ5IGNvZGUgaXMgZ2l2ZW4gZm9yIGEgYmF0dGVyeSBtb2R1bGUgYSBsaXN0IG9mIGNlbGxzIGFyZSByZXF1aXJlZCB0byBiZSByZWdpc3RlcmVkIGFzIHN1YmNvbXBvbmVudHMuXG5JZiB0aGlzIHRyYWN0aW9uIGJhdHRlcnkgY29kZSBpcyBnaXZlbiBmb3IgYSBiYXR0ZXJ5IHBhY2sgYSBsaXN0IG9mIG1vZHVsZXMgYXJlIHJlcXVpcmVkIHRvIGJlIHJlZ2lzdGVyZWQgYXMgc3ViY29tcG9uZW50cyAoY29udGFpbmluZyBlYWNoIGEgbGlzdCBvZiBjZWxsIHN1YmNvbXBvbmVudHMgcmVzcGVjdGl2ZWx5KS4iLAogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX2JhbW1faW8uY2F0ZW5heC50cmFjdGlvbl9iYXR0ZXJ5X2NvZGVfMS4wLjBfQ29tcG9uZW50TGlzdCIKICAgICAgICAgIH0sCiAgICAgICAgICAicHJvZHVjdFR5cGUiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSB0eXBlIG9mIHRoZSBiYXR0ZXJ5IGNvbXBvbmVudCwgZS5nLiBhIHBhY2ssIGEgbW9kdWxlIG9yIGEgY2VsbC4iLAogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX2JhbW1faW8uY2F0ZW5heC50cmFjdGlvbl9iYXR0ZXJ5X2NvZGVfMS4wLjBfQ29tcG9uZW50VHlwZUNoYXJhY3RlcnN0aWMiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAicmVxdWlyZWQiIDogWyAidHJhY3Rpb25CYXR0ZXJ5Q29kZSIsICJwcm9kdWN0VHlwZSIgXQogICAgICB9LAogICAgICAidXJuX2JhbW1faW8uY2F0ZW5heC50cmFjdGlvbl9iYXR0ZXJ5X2NvZGVfMS4wLjBfQ29tcG9uZW50TGlzdCIgOiB7CiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJBIGxpc3Qgb2YgYmF0dGVyeSBjb21wb25lbnRzIGxpa2UgbW9kdWxlcyBvciBjZWxscy4iLAogICAgICAgICJ0eXBlIiA6ICJhcnJheSIsCiAgICAgICAgIml0ZW1zIiA6IHsKICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4LnRyYWN0aW9uX2JhdHRlcnlfY29kZV8xLjAuMF9UcmFjdGlvbkJhdHRlcnlDb21wb25lbnQiCiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwKICAicHJvcGVydGllcyIgOiB7CiAgICAidHJhY3Rpb25CYXR0ZXJ5Q29kZSIgOiB7CiAgICAgICJkZXNjcmlwdGlvbiIgOiAiVHJhY3Rpb24gQmF0dGVyeSBDb2RlIGlkZW50aWZ5aW5nIGEgc2luZ2xlIHRyYWN0aW9uIGJhdHRlcnkgY29tcG9uZW50IGxpa2UgYSBwYWNrLCBtb2R1bGUgb3IgY2VsbC4gIiwKICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLmNhdGVuYXgudHJhY3Rpb25fYmF0dGVyeV9jb2RlXzEuMC4wX1RyYWN0aW9uQmF0dGVyeUNvZGVUcmFpdCIKICAgIH0sCiAgICAic3ViY29tcG9uZW50cyIgOiB7CiAgICAgICJkZXNjcmlwdGlvbiIgOiAiU3ViY29tcG9uZW50cyBvZiB0aGUgY29tcG9uZW50LCBpZiBhcHBsaWNhYmxlLiBUaGUgcmVsYXRpb25zaGlwIGJldHdlZW4gdHJhY3Rpb24gYmF0dGVyeSBjb2RlcyBhcmUgYXMgZm9sbG93czpcblxuSWYgdGhpcyB0cmFjdGlvbiBiYXR0ZXJ5IGNvZGUgaXMgZ2l2ZW4gZm9yIGEgY2VsbCBzdWJjb21wb25lbnRzIGFyZSBub3QgcmVxdWlyZWQuIFxuSWYgdGhpcyB0cmFjdGlvbiBiYXR0ZXJ5IGNvZGUgaXMgZ2l2ZW4gZm9yIGEgYmF0dGVyeSBtb2R1bGUgYSBsaXN0IG9mIGNlbGxzIGFyZSByZXF1aXJlZCB0byBiZSByZWdpc3RlcmVkIGFzIHN1YmNvbXBvbmVudHMuXG5JZiB0aGlzIHRyYWN0aW9uIGJhdHRlcnkgY29kZSBpcyBnaXZlbiBmb3IgYSBiYXR0ZXJ5IHBhY2sgYSBsaXN0IG9mIG1vZHVsZXMgYXJlIHJlcXVpcmVkIHRvIGJlIHJlZ2lzdGVyZWQgYXMgc3ViY29tcG9uZW50cyAoY29udGFpbmluZyBlYWNoIGEgbGlzdCBvZiBjZWxsIHN1YmNvbXBvbmVudHMgcmVzcGVjdGl2ZWx5KS4iLAogICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX2JhbW1faW8uY2F0ZW5heC50cmFjdGlvbl9iYXR0ZXJ5X2NvZGVfMS4wLjBfQ29tcG9uZW50TGlzdCIKICAgIH0sCiAgICAicHJvZHVjdFR5cGUiIDogewogICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSB0eXBlIG9mIHRoZSBiYXR0ZXJ5IGNvbXBvbmVudCwgZS5nLiBhIHBhY2ssIGEgbW9kdWxlIG9yIGEgY2VsbC4iLAogICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX2JhbW1faW8uY2F0ZW5heC50cmFjdGlvbl9iYXR0ZXJ5X2NvZGVfMS4wLjBfQ29tcG9uZW50VHlwZUNoYXJhY3RlcnN0aWMiCiAgICB9CiAgfSwKICAicmVxdWlyZWQiIDogWyAidHJhY3Rpb25CYXR0ZXJ5Q29kZSIsICJwcm9kdWN0VHlwZSIgXQp9
  bpdm:
    url: 'CHANGE_ME'

  minioUser: 'CHANGE_ME'
  minioPassword: 'CHANGE_ME'
  minioUrl: 'CHANGE_ME'

  oauth2:
    clientId: 'CHANGE_ME'
    clientSecret: 'CHANGE_ME'
    clientTokenUri: 'CHANGE_ME'

  apiKeyAdmin: *irs_admin_api_key
  apiKeyRegular: *irs_regular_api_key

  edc:
    callbackurl: 'CHANGE_ME'
    catalog:
      cache:
        enabled: "false"
    controlplane:
      endpoint:
        data: 'CHANGE_ME'
        statesuffix: /state
      apikey:
        secret: 'CHANGE_ME'

  minio:
    nameOverride: 'CHANGE_ME'
    fullnameOverride: 'CHANGE_ME'
    serviceAccount:
      create: false
    rootUser: 'CHANGE_ME'
    rootPassword: 'CHANGE_ME'


###################################
# EDC Consumer configuration  #
###################################
tractusx-connector:
  nameOverride: 'CHANGE_ME'
  fullnameOverride: 'CHANGE_ME'
  enabled: true
  install:
    postgresql: false
    vault: false
  participant:
    id: 'CHANGE_ME'

  controlplane:
    ingresses:
      - enabled: true
        hostname: 'CHANGE_ME'
        annotations:
          nginx.ingress.kubernetes.io/ssl-passthrough: "false"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        endpoints:
          - protocol
          - management
        tls:
          enabled: true
          secretName: tls-secret
    ssi:
      miw:
        url: 'CHANGE_ME'
        authorityId: 'CHANGE_ME'
      oauth:
        tokenurl: 'CHANGE_ME'
        client:
          id: 'CHANGE_ME'
          secretAlias: 'CHANGE_ME'

    endpoints:
      # -- default api for health checks, should not be added to any ingress
      default:
        port: 8080
        path: /api
      # -- data management api, used by internal users, can be added to an ingress and must not be internet facing
      management:
        port: 8081
        path: /management
        # -- authentication key, must be attached to each 'X-Api-Key' request header
        authKey: 'CHANGE_ME'
      # -- control api, used for internal control calls. can be added to the internal ingress, but should probably not
      control:
        port: 8083
        path: /control
      # -- ids api, used for inter connector communication and must be internet facing
      protocol:
        port: 8084
        path: /api/v1/dsp
      # -- metrics api, used for application metrics, must not be internet facing
      metrics:
        port: 9090
        path: /metrics
      # -- observability api with unsecured access, must not be internet facing
      observability:
        port: 8085
        # -- observability api, provides /health /readiness and /liveness endpoints
        path: /observability
        # -- allow or disallow insecure access, i.e. access without authentication
        insecure: true

    internationalDataSpaces:
      id: TXDC
      description: Tractus-X Eclipse IDS Data Space Connector
      title: ""
      maintainer: ""
      curator: ""
      catalogId: TXDC-Catalog

    # Explicitly declared url for reaching the ids api (e.g. if ingresses not used)
    url:
      ids: ""

    resources:
      limits:
        cpu: 768m
        memory: 768Mi
      requests:
        cpu: 100m
        memory: 256Mi
    # Explicitly declared url for reaching the ids api (e.g. if ingresses not used)

  dataplane:
    ingresses:
      - enabled: true
        hostname: 'CHANGE_ME'
        annotations:
          nginx.ingress.kubernetes.io/ssl-passthrough: "false"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        endpoints:
          - public
        className: "nginx"
        tls:
          enabled: true
          secretName: tls-secret

    endpoints:
      default:
        port: 8080
        path: /api
      public:
        port: 8081
        path: /api/public
      control:
        port: 8083
        path: /api/dataplane/control
      observability:
        port: 8085
        path: /observability
        insecure: true
      metrics:
        port: 9090
        path: /metrics
    url:
      public: ""
    resources:
      limits:
        cpu: 768m
        memory: 768Mi
      requests:
        cpu: 100m
        memory: 256Mi
  securityContext:
    readOnlyRootFilesystem: false
  ## currently we need to provide a url but is not used anywhere
  # URL where the EndpointDataReference callback will be sent to
  backendService:
    httpProxyTokenReceiverUrl: 'CHANGE_ME'

  ################################
  # EDC Vault Configuration #
  ################################
  vault:
    hashicorp:
      url: 'CHANGE_ME'
      token: 'CHANGE_ME'
      timeout: 30
      healthCheck:
        enabled: true
        standbyOk: true
      paths:
        secret: /v1/traceability-foss
        health: /v1/sys/health
    secretNames:
      transferProxyTokenSignerPrivateKey: 'CHANGE_ME'
      transferProxyTokenSignerPublicKey: 'CHANGE_ME'
      transferProxyTokenEncryptionAesKey: 'CHANGE_ME'


  ##################################
  # EDC Postgres Configuration #
  ##################################
  postgresql:
    enabled: true
    auth:
      username: 'CHANGE_ME'
      password: 'CHANGE_ME'
    username: 'CHANGE_ME'
    password: 'CHANGE_ME'
    jdbcUrl: 'CHANGE_ME'

###################################
# EDC Postgres Configuration #
###################################
edc-postgresql:
  primary:
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 100m
        memory: 4Gi
  nameOverride: 'CHANGE_ME'
  fullnameOverride: 'CHANGE_ME'
  enabled: true
  auth:
    database: edc
    username: 'CHANGE_ME'
    postgresPassword: 'CHANGE_ME'
    password: 'CHANGE_ME'
