@startuml
skinparam monochrome true
skinparam shadowing false
skinparam defaultFontName "Architects daughter"
skinparam linetype ortho
title: Notification Domain

class Notification {
    id: Long,
    title : String;
    type: NotificationType;
    status : NotificationStatus;
    createdBy: String;
    createdByName: String;
    createdDate: Instant;
    updatedDate: Instant;
    assetIds: ArrayList<String>();
    channel: NotificationSide;
    sentTo: String;
    sentToName: String;
    severity: NotificationSeverity;
    targetDate: Instant;
    messages: List<NotificationMessage>
    description: String;
}

enum NotificationType{
    ALERT;
    INVESTIGATION;
}

class NotificationId {
id: Long;
}

enum NotificationSide{
    SENDER;
    RECEIVER;
}
class BPN{
bpn: String;
}
class NotificationMessage {
   id: String
   sentBy: String
   sentByName: String
   sendTo: String
   sendToName: String
   contractAgreementId: String
   notificationReferenceId: String
   edcNotificationId: String;
   messageDate: Instant;
   messageId: String;
   message: String;
   status: NotificationStatus;
   errorMessage: String;
}

enum NotificationStatus{
 CREATED(NotificationSide.SENDER, emptySet()),
    SENT(NotificationSide.SENDER, Set.of(NotificationSide.SENDER)),
    RECEIVED(NotificationSide.RECEIVER, emptySet()),
    ACKNOWLEDGED(NotificationSide.RECEIVER, Set.of(NotificationSide.RECEIVER, NotificationSide.SENDER)),
    ACCEPTED(NotificationSide.RECEIVER, Set.of(NotificationSide.RECEIVER)),
    DECLINED(NotificationSide.RECEIVER, Set.of(NotificationSide.RECEIVER)),
    CANCELED(NotificationSide.SENDER, Set.of(NotificationSide.SENDER)),
    CLOSED(NotificationSide.SENDER, of(NotificationSide.SENDER, NotificationSide.RECEIVER));
 }

Notification --> NotificationId
Notification --> BPN
Notification --> NotificationType
Notification --> NotificationStatus
Notification --> NotificationSide
Notification *-- NotificationMessage
@enduml

